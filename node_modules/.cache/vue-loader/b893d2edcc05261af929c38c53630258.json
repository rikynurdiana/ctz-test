{"remainingRequest":"/home/riky/Work/ctz-tes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/riky/Work/ctz-tes/src/views/Jawaban.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/riky/Work/ctz-tes/src/views/Jawaban.vue","mtime":1550464553213},{"path":"/home/riky/Work/ctz-tes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/riky/Work/ctz-tes/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/riky/Work/ctz-tes/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/riky/Work/ctz-tes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/riky/Work/ctz-tes/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  data: () => ({\n    dialog: false,\n    headers: [\n      {\n        text: 'Dessert (100g serving)',\n        align: 'left',\n        sortable: false,\n        value: 'name'\n      },\n      { text: 'Calories', value: 'calories' },\n      { text: 'Fat (g)', value: 'fat' },\n      { text: 'Carbs (g)', value: 'carbs' },\n      { text: 'Protein (g)', value: 'protein' },\n      { text: 'Actions', value: 'name', sortable: false }\n    ],\n    desserts: [],\n    editedIndex: -1,\n    editedItem: {\n      name: '',\n      calories: 0,\n      fat: 0,\n      carbs: 0,\n      protein: 0\n    },\n    defaultItem: {\n      name: '',\n      calories: 0,\n      fat: 0,\n      carbs: 0,\n      protein: 0\n    }\n  }),\n\n  computed: {\n    formTitle () {\n      return this.editedIndex === -1 ? 'New Item' : 'Edit Item'\n    }\n  },\n\n  watch: {\n    dialog (val) {\n      val || this.close()\n    }\n  },\n\n  created () {\n    this.initialize()\n  },\n\n  methods: {\n    initialize () {\n      this.desserts = [\n        {\n          name: 'Frozen Yogurt',\n          calories: 159,\n          fat: 6.0,\n          carbs: 24,\n          protein: 4.0\n        },\n        {\n          name: 'Ice cream sandwich',\n          calories: 237,\n          fat: 9.0,\n          carbs: 37,\n          protein: 4.3\n        },\n        {\n          name: 'Eclair',\n          calories: 262,\n          fat: 16.0,\n          carbs: 23,\n          protein: 6.0\n        },\n        {\n          name: 'Cupcake',\n          calories: 305,\n          fat: 3.7,\n          carbs: 67,\n          protein: 4.3\n        },\n        {\n          name: 'Gingerbread',\n          calories: 356,\n          fat: 16.0,\n          carbs: 49,\n          protein: 3.9\n        },\n        {\n          name: 'Jelly bean',\n          calories: 375,\n          fat: 0.0,\n          carbs: 94,\n          protein: 0.0\n        },\n        {\n          name: 'Lollipop',\n          calories: 392,\n          fat: 0.2,\n          carbs: 98,\n          protein: 0\n        },\n        {\n          name: 'Honeycomb',\n          calories: 408,\n          fat: 3.2,\n          carbs: 87,\n          protein: 6.5\n        },\n        {\n          name: 'Donut',\n          calories: 452,\n          fat: 25.0,\n          carbs: 51,\n          protein: 4.9\n        },\n        {\n          name: 'KitKat',\n          calories: 518,\n          fat: 26.0,\n          carbs: 65,\n          protein: 7\n        }\n      ]\n    },\n\n    editItem (item) {\n      this.editedIndex = this.desserts.indexOf(item)\n      this.editedItem = Object.assign({}, item)\n      this.dialog = true\n    },\n\n    deleteItem (item) {\n      const index = this.desserts.indexOf(item)\n      confirm('Are you sure you want to delete this item?') && this.desserts.splice(index, 1)\n    },\n\n    close () {\n      this.dialog = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n        this.editedIndex = -1\n      }, 300)\n    },\n\n    save () {\n      if (this.editedIndex > -1) {\n        Object.assign(this.desserts[this.editedIndex], this.editedItem)\n      } else {\n        this.desserts.push(this.editedItem)\n      }\n      this.close()\n    }\n  }\n}\n",{"version":3,"sources":["Jawaban.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"Jawaban.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <v-toolbar flat color=\"white\">\n      <v-toolbar-title>My CRUD</v-toolbar-title>\n      <v-divider\n        class=\"mx-2\"\n        inset\n        vertical\n      ></v-divider>\n      <v-spacer></v-spacer>\n      <v-dialog v-model=\"dialog\" max-width=\"500px\">\n        <v-btn slot=\"activator\" color=\"primary\" dark class=\"mb-2\">New Item</v-btn>\n        <v-card>\n          <v-card-title>\n            <span class=\"headline\">{{ formTitle }}</span>\n          </v-card-title>\n\n          <v-card-text>\n            <v-container grid-list-md>\n              <v-layout wrap>\n                <v-flex xs12 sm6 md4>\n                  <v-text-field v-model=\"editedItem.name\" label=\"Dessert name\"></v-text-field>\n                </v-flex>\n                <v-flex xs12 sm6 md4>\n                  <v-text-field v-model=\"editedItem.calories\" label=\"Calories\"></v-text-field>\n                </v-flex>\n                <v-flex xs12 sm6 md4>\n                  <v-text-field v-model=\"editedItem.fat\" label=\"Fat (g)\"></v-text-field>\n                </v-flex>\n                <v-flex xs12 sm6 md4>\n                  <v-text-field v-model=\"editedItem.carbs\" label=\"Carbs (g)\"></v-text-field>\n                </v-flex>\n                <v-flex xs12 sm6 md4>\n                  <v-text-field v-model=\"editedItem.protein\" label=\"Protein (g)\"></v-text-field>\n                </v-flex>\n              </v-layout>\n            </v-container>\n          </v-card-text>\n\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" flat @click=\"close\">Cancel</v-btn>\n            <v-btn color=\"blue darken-1\" flat @click=\"save\">Save</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-toolbar>\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"desserts\"\n      class=\"elevation-1\"\n    >\n      <template slot=\"items\" slot-scope=\"props\">\n        <td>{{ props.item.name }}</td>\n        <td class=\"text-xs-right\">{{ props.item.calories }}</td>\n        <td class=\"text-xs-right\">{{ props.item.fat }}</td>\n        <td class=\"text-xs-right\">{{ props.item.carbs }}</td>\n        <td class=\"text-xs-right\">{{ props.item.protein }}</td>\n        <td class=\"justify-center layout px-0\">\n          <v-icon\n            small\n            class=\"mr-2\"\n            @click=\"editItem(props.item)\"\n          >\n            edit\n          </v-icon>\n          <v-icon\n            small\n            @click=\"deleteItem(props.item)\"\n          >\n            delete\n          </v-icon>\n        </td>\n      </template>\n      <template slot=\"no-data\">\n        <v-btn color=\"primary\" @click=\"initialize\">Reset</v-btn>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      dialog: false,\n      headers: [\n        {\n          text: 'Dessert (100g serving)',\n          align: 'left',\n          sortable: false,\n          value: 'name'\n        },\n        { text: 'Calories', value: 'calories' },\n        { text: 'Fat (g)', value: 'fat' },\n        { text: 'Carbs (g)', value: 'carbs' },\n        { text: 'Protein (g)', value: 'protein' },\n        { text: 'Actions', value: 'name', sortable: false }\n      ],\n      desserts: [],\n      editedIndex: -1,\n      editedItem: {\n        name: '',\n        calories: 0,\n        fat: 0,\n        carbs: 0,\n        protein: 0\n      },\n      defaultItem: {\n        name: '',\n        calories: 0,\n        fat: 0,\n        carbs: 0,\n        protein: 0\n      }\n    }),\n\n    computed: {\n      formTitle () {\n        return this.editedIndex === -1 ? 'New Item' : 'Edit Item'\n      }\n    },\n\n    watch: {\n      dialog (val) {\n        val || this.close()\n      }\n    },\n\n    created () {\n      this.initialize()\n    },\n\n    methods: {\n      initialize () {\n        this.desserts = [\n          {\n            name: 'Frozen Yogurt',\n            calories: 159,\n            fat: 6.0,\n            carbs: 24,\n            protein: 4.0\n          },\n          {\n            name: 'Ice cream sandwich',\n            calories: 237,\n            fat: 9.0,\n            carbs: 37,\n            protein: 4.3\n          },\n          {\n            name: 'Eclair',\n            calories: 262,\n            fat: 16.0,\n            carbs: 23,\n            protein: 6.0\n          },\n          {\n            name: 'Cupcake',\n            calories: 305,\n            fat: 3.7,\n            carbs: 67,\n            protein: 4.3\n          },\n          {\n            name: 'Gingerbread',\n            calories: 356,\n            fat: 16.0,\n            carbs: 49,\n            protein: 3.9\n          },\n          {\n            name: 'Jelly bean',\n            calories: 375,\n            fat: 0.0,\n            carbs: 94,\n            protein: 0.0\n          },\n          {\n            name: 'Lollipop',\n            calories: 392,\n            fat: 0.2,\n            carbs: 98,\n            protein: 0\n          },\n          {\n            name: 'Honeycomb',\n            calories: 408,\n            fat: 3.2,\n            carbs: 87,\n            protein: 6.5\n          },\n          {\n            name: 'Donut',\n            calories: 452,\n            fat: 25.0,\n            carbs: 51,\n            protein: 4.9\n          },\n          {\n            name: 'KitKat',\n            calories: 518,\n            fat: 26.0,\n            carbs: 65,\n            protein: 7\n          }\n        ]\n      },\n\n      editItem (item) {\n        this.editedIndex = this.desserts.indexOf(item)\n        this.editedItem = Object.assign({}, item)\n        this.dialog = true\n      },\n\n      deleteItem (item) {\n        const index = this.desserts.indexOf(item)\n        confirm('Are you sure you want to delete this item?') && this.desserts.splice(index, 1)\n      },\n\n      close () {\n        this.dialog = false\n        setTimeout(() => {\n          this.editedItem = Object.assign({}, this.defaultItem)\n          this.editedIndex = -1\n        }, 300)\n      },\n\n      save () {\n        if (this.editedIndex > -1) {\n          Object.assign(this.desserts[this.editedIndex], this.editedItem)\n        } else {\n          this.desserts.push(this.editedItem)\n        }\n        this.close()\n      }\n    }\n  }\n</script>"]}]}